// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Health check API",
                "produces": [
                    "application/json"
                ],
                "summary": "Health check API",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/dto.HealthCheckResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/chat-rooms": {
            "get": {
                "description": "Get chat room by id",
                "produces": [
                    "application/json"
                ],
                "summary": "Get chat room by id API",
                "parameters": [
                    {
                        "type": "string",
                        "description": "room id",
                        "name": "roomid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/model.ChatRoom"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    }
                }
            },
            "put": {
                "description": "Update new chat room and saves in mongo db",
                "produces": [
                    "application/json"
                ],
                "summary": "Update chat room API",
                "parameters": [
                    {
                        "type": "string",
                        "description": "room id",
                        "name": "roomid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body Chat Room details",
                        "name": "ChatRoom",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ChatRoom"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessMessage"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    }
                }
            },
            "post": {
                "description": "Create new chat room and saves in mongo db",
                "produces": [
                    "application/json"
                ],
                "summary": "Create new chat room API",
                "parameters": [
                    {
                        "description": "Request body Chat Room details",
                        "name": "ChatRoom",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ChatRoom"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessMessage"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete chat room by id mongo db",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete new chat room API",
                "parameters": [
                    {
                        "type": "string",
                        "description": "room id",
                        "name": "roomid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessMessage"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Get user by id",
                "produces": [
                    "application/json"
                ],
                "summary": "Get user by id API",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/dto.User"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    }
                }
            },
            "post": {
                "description": "Create new user and saves in mongo db",
                "produces": [
                    "application/json"
                ],
                "summary": "Create new user API",
                "parameters": [
                    {
                        "description": "Request body has user details",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/users/{uid}": {
            "put": {
                "description": "Update user and saves in mongo db",
                "produces": [
                    "application/json"
                ],
                "summary": "Update User API",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body user details",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RequestUserUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessMessage"
                        }
                    },
                    "401": {
                        "description": "Wrong Password",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/ws/chat-room/{room_id}": {
            "get": {
                "description": "Websocket handler api to initiate websockets",
                "produces": [
                    "application/json"
                ],
                "summary": "Websocket handler API",
                "parameters": [
                    {
                        "type": "string",
                        "description": "room id",
                        "name": "roomid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body user id and message body",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Message"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessMessage"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorMessage"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ErrorMessage": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.HealthCheckResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.Message": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "dto.RequestUserUpdate": {
            "type": "object",
            "required": [
                "firstname",
                "lastname",
                "newpassword",
                "oldpassword"
            ],
            "properties": {
                "_id": {
                    "type": "object"
                },
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "newpassword": {
                    "type": "string"
                },
                "oldpassword": {
                    "type": "string"
                }
            }
        },
        "dto.SuccessMessage": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "object"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.User": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "object"
                },
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.ChatRoom": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.User": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1",
	Host:        "",
	BasePath:    "/realtime-chat/api/v1",
	Schemes:     []string{},
	Title:       "RealTime-Chat Microservice",
	Description: "This microservice serves as Realtime chat backend",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
